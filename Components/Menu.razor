@namespace Gizmo.Web.Components
@inherits CustomDOMComponentBase

<CascadingValue Value="@this">

    <div class="@Class @ClassName"
         style="@Style"
         @onmouseout="OnMouseLeaveHandler">

        @if (IsContextMenu)
        {

        }
        else if (Activator != null)
        {
            <div @onmousedown="OnMouseDownHandler"
                 @onmouseover="OnMouseOverHandler"
                 @oncontextmenu:preventDefault="@(ActivationEvent == MenuActivationEvents.RightClick)"
                 @oncontextmenu="OnContextMenuHandler">
                 @Activator
            </div>
        }
        else
        {
            @if (!string.IsNullOrEmpty(Icon) || SVGIcon.HasValue)
            {
                <Button Variant="@Variant"
                        Size="@Size"
                        RightIcon="@Icon"
                        RightSVGIcon="SVGIcon"
                        @onmousedown="OnMouseDownHandler"
                        @onmouseover="OnMouseOverHandler"
                        >
                    @Label
                </Button>
            }
            else
            {
                <Button Variant="@Variant"
                        Size="@Size"
                        RightSVGIcon="@(IsOpen ? Icons.TriangleUp : Icons.TriangleDown)"
                        @onmousedown="OnMouseDownHandler"
                        @onmouseover="OnMouseOverHandler"
                        >
                    @Label
                </Button>
            }
        }

        <div class="@PopupWrapperClassName" @onclick="OnClickOverlayHandler">
            <Popup @bind-IsOpen="IsOpen" Class="@PopupClassName" Style="@PopupStyleValue" IsModal="@(!CloseOnItemClick)">
                <List @ref="_itemsList"
                      Direction="@Direction"
                      ExpandBottomToTop="@ExpandBottomToTop"
                      PreserveIconSpace="@PreserveIconSpace"
                      CanClick="true"
                      OnClickItem="@(() => OnClickMenuItemHandler())">
                    @ChildContent
                </List>
            </Popup>
        </div>
    </div>
    
    @if (!IsContextMenu && OpenDirection != PopupOpenDirections.Cursor)
    {
        <Overlay Visible="@IsOpen"
                 @onclick="OnClickOverlayHandler">
        </Overlay>
    }

</CascadingValue>