@namespace Gizmo.Web.Components
@inherits CustomDOMComponentBase

<CascadingValue Value="@this">

    <div class="@Class @ClassName"
         style="@Style"
         @onmouseout="OnMouseLeaveHandler">

        @if (IsContextMenu)
        {

        }
        else if (Activator != null)
        {
            <div @onmousedown="OnMouseDownHandler"
                 @onmouseover="OnMouseOverHandler"
                 @oncontextmenu:preventDefault="@(ActivationEvent == MenuActivationEvents.RightClick)"
                 @oncontextmenu="OnContextMenuHandler">
                 @Activator
            </div>
        }
        else
        {
            @if (!string.IsNullOrEmpty(Icon) || SVGIcon.HasValue)
            {
                <Button Variant="@Variant"
                        Size="@Size"
                        RightIcon="@Icon"
                        RightSVGIcon="SVGIcon"
                        @onmousedown="OnMouseDownHandler"
                        @onmouseover="OnMouseOverHandler"
                        >
                    @Label
                </Button>
            }
            else
            {
                <Button Variant="@Variant"
                        Size="@Size"
                        RightSVGIcon="@(IsOpen ? Icons.TriangleUp : Icons.TriangleDown)"
                        @onmousedown="OnMouseDownHandler"
                        @onmouseover="OnMouseOverHandler"
                        >
                    @Label
                </Button>
            }
        }

        <Popup @bind-IsOpen="IsOpen" Class="@PopupClassName" Style="@PopupStyleValue" CloseOnClick="@CloseOnItemClick"
               OpenDirection="@(IsContextMenu ? PopupOpenDirections.Cursor : OpenDirection)">
            <List @ref="_popupContent"
                    Direction="@Direction"
                    ExpandBottomToTop="@ExpandBottomToTop"
                    PreserveIconSpace="@PreserveIconSpace"
                    CanClick="true"
                    OnClickItem="@(() => OnClickMenuItemHandler())">
                @ChildContent
            </List>
        </Popup>
    </div>

</CascadingValue>