@namespace Gizmo.Web.Components
@inherits GizInputBase<TValue>

@typeparam TValue

<CascadingValue Value="@((ISelect<TValue>)this)" IsFixed="true">
    <div class="@Class @ClassName"
         style="@Style"
         id="@Id"
         @ref="@Ref">         
        <div class="giz-input-select__content_wrapper" @ref="_inputElement">
            <GizInput Label="@Label"
                      ValidationErrorStyle="@(ValidationErrorStyle == ValidationErrorStyles.Label ? ValidationErrorStyles.BorderOnly : ValidationErrorStyle)"
                      IsDisabled="@IsDisabled"
                      IsFullWidth="@IsFullWidth"
                      Width="@Width"
                      HasOutline="@HasOutline"
                      HasShadow="@HasShadow"
                      IsTransparent="@IsTransparent"
                      Size="@Size"
                      IsValid="@IsValid"
                      ValidationMessage="@ValidationMessage"
                      RightSVGIcon="Icons.TriangleDown"
                      @onclick="OnClickInput">

                @if (@_selectedItem?.ChildContent != null)
                {
                    <div class="giz-input-select__content" @onclick="OnClickInput">
                        @_selectedItem.ChildContent
                    </div>
                }
                else
                {
                    <div class="giz-input-wrapper">
                        <input type="text"
                               value="@_selectedItem?.Text"
                               disabled="@IsDisabled"
                               readonly
                               @onclick="OnClickInput"
                               @onkeydown="OnInputKeyDownHandler"
                               @onkeydown:preventDefault="true" />
                    </div>
                }

                @if (CanClearValue && IsNullable() && Value != null)
                {
                    <div class="giz-input-icon-right">
                        <Icon SVGIcon="@Icons.Close" @onclick="OnClickButtonClearValueHandler" />
                    </div>
                }
            </GizInput>

            <Popup MaximumHeight="@MaximumHeight"
                   @bind-IsOpen="_isOpen"
                   OpenDirection="@OpenDirection"
                   Class="@PopupClassName"
                   Style="@PopupStyleValue">
                <List @ref="_popupContent"
                      CanClick="true"
                      MaximumHeight="@(OpenDirection == PopupOpenDirections.Cursor ? MaximumHeight : null)">
                    @ChildContent
                </List>
            </Popup>
        </div>
            
        @if (ValidationErrorStyle == ValidationErrorStyles.Label)
        {
            <div class="giz-input-validation-label">
                @ValidationMessage
            </div>
        }
    </div>
</CascadingValue>
