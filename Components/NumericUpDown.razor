@namespace Gizmo.Web.Components
@inherits GizInputBase<TValue>

@typeparam TValue

<GizInput Class="@ClassName"
          Style="@Style"
          Label="@Label"
          ValidationErrorStyle="@ValidationErrorStyle"
          IsDisabled="@IsDisabled"
          IsFullWidth="@IsFullWidth"
          Width="@Width"
          HasOutline="@HasOutline"
          HasShadow="@HasShadow"
          IsTransparent="@IsTransparent"
          Size="@Size"
          IsValid="@IsValid"
          ValidationMessage="@ValidationMessage">
    <div class="giz-input-wrapper">
        <input type="text"
               value="@_text"
               disabled="@IsDisabled"
               @ref="_inputElement"
               @oninput="OnInputHandler" />
        @if (!string.IsNullOrEmpty(Format))
        {            
            <div class="giz-input-numeric-up-down__value"
                 @onclick="@(() => _inputElement.FocusAsync())"
                 @oncontextmenu="@(() => _inputElement.FocusAsync())"
                 @oncontextmenu:preventDefault="true">
                @if (_decimalValue.HasValue)
                {
                    @_decimalValue.Value.ToString(Format)
                }
            </div>
        }
    </div>

    @if (CanClearValue && IsNullable() && Value != null)
    {
        <div class="giz-input__icon-right">
            <Icon SVGIcon="@Icons.Close" @onclick="OnClickButtonClearValueHandler" />
        </div>
    }

    <div class="giz-input__icon-right">
        <Icon SVGIcon="@Icons.ArrowDown" @onclick="OnClickButtonDecreaseValueHandler" />
    </div>

    <div class="giz-input__icon-right">
        <Icon SVGIcon="@Icons.ArrowUp" @onclick="OnClickButtonIncreaseValueHandler" />
    </div>

</GizInput>