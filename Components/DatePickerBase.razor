@namespace Gizmo.Web.Components
@inherits GizInputBase<TValue>

@typeparam TValue

@if (_timePickerIsOpen)
{
    <TimePickerBase TValue="TValue" Value="@Value" ValueChanged="@TimePickerValueChanged" IsFullWidth="@IsFullWidth" OnClickOK="@OnClickTimePickerOK" OnClickCancel="@OnClickTimePickerCancel" Culture="@Culture" Format="@Format" />
}
else
{
    <div class="giz-date-picker"
         @ref="@Ref">
        <div class="giz-date-picker__header">
            <div @onclick="OnClickButtonYearHandler"><span class="giz-date-picker__header__title__year">@(_previousValue?.ToString("yyyy") ?? DateTime.Now.ToString("yyyy"))</span></div>
            <div class="giz-date-picker__header__title">@(_previousValue?.ToString("ddd, dd MMM") ?? DateTime.Now.ToString("ddd, dd MMM"))</div>
        </div>
        @if (_showMonthPicker)
        {
            <div class="giz-date-picker__content">
                <div class="giz-date-picker__content__title-switch">
                    <IconButton Variant="ButtonVariants.Text"
                                SVGIcon="Icons.ArrowLeft"
                                Class="giz-date-picker-navigation-button"
                                @onclick="OnClickButtonPreviousYearHandler" />
                    <button class="giz-date-picker__content__title-slide"
                            @onclick="OnClickButtonYearHandler">
                        @CurrentVisibleMonth.ToString("yyyy")
                    </button>
                    <IconButton Variant="ButtonVariants.Text"
                                SVGIcon="Icons.ArrowRight"
                                Class="giz-date-picker-navigation-button"
                                @onclick="OnClickButtonNextYearHandler" />
                </div>
                <div class="giz-date-picker__content__months">
                    @for (int i = 1; i <= 12; i++)
                    {
                        var local_i = i;
                        var monthName = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedMonthName(local_i);
                        <button @onclick="@(() => OnClickButtonMonth(local_i))"
                                class="@(local_i == CurrentVisibleMonth.Month ? "giz-date-picker-month-button active" : "giz-date-picker-month-button")">
                            @monthName
                        </button>
                    }
                </div>
            </div>
        }
        else if (_showYearPicker)
        {
            <div class="giz-date-picker__years">
                @for (int i = @CurrentVisibleMonth.Year - 10; i < @CurrentVisibleMonth.Year + 10; i++)
                {
                    var local_i = i;
                    <button @onclick="@(() => OnClickButtonYear(local_i))"
                            class="@(local_i == CurrentVisibleMonth.Year ? "giz-date-picker-year-button active" : "giz-date-picker-year-button")">
                        @local_i
                    </button>
                }
            </div>
        }
        else
        {
            <div class="giz-date-picker__content">
                <div class="giz-date-picker__content__title-switch">
                    <IconButton Variant="ButtonVariants.Text"
                                SVGIcon="Icons.ArrowLeft"
                                Class="giz-date-picker-navigation-button"
                                @onclick="OnClickButtonPreviousMonthHandler" />
                    <button class="giz-date-picker__content__title-slide"
                            @onclick="OnClickButtonMonthHandler">
                        @CurrentVisibleMonth.ToString("MMM yyyy")
                    </button>
                    <IconButton Variant="ButtonVariants.Text"
                                SVGIcon="Icons.ArrowRight"
                                Class="giz-date-picker-navigation-button"
                                @onclick="OnClickButtonNextMonthHandler" />
                </div>
                <div class="giz-date-picker__content__weekdays">
                    <div class="giz-date-picker-weekday">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedDayName(DayOfWeek.Sunday)</div>
                    <div class="giz-date-picker-weekday">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedDayName(DayOfWeek.Monday)</div>
                    <div class="giz-date-picker-weekday">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedDayName(DayOfWeek.Tuesday)</div>
                    <div class="giz-date-picker-weekday">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedDayName(DayOfWeek.Wednesday)</div>
                    <div class="giz-date-picker-weekday">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedDayName(DayOfWeek.Thursday)</div>
                    <div class="giz-date-picker-weekday">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedDayName(DayOfWeek.Friday)</div>
                    <div class="giz-date-picker-weekday">@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetAbbreviatedDayName(DayOfWeek.Saturday)</div>
                </div>
                <div class="giz-date-picker__content__days">
                    @for (int i = 0; i < _whiteSpaces; i++)
                    {
                        <div class="giz-date-picker-day-button--empty"></div>
                    }
                    @for (int i = 1; i <= _monthDays; i++)
                    {
                        var local_i = i;
                        <button class="@GetDayClass(local_i)"
                                @onclick="@(() => OnClickButtonDay(local_i))">
                            @local_i
                        </button>
                    }
                </div>
            </div>
            @if (ShowTime)
            {
                <div class="giz-date-picker__time">
                    <IconButton Variant="ButtonVariants.Text"
                                SVGIcon="Icons.Time2" 
                                @onclick="OnClickTimePickerHandler" />
                </div>
            }
        }
    </div>
}